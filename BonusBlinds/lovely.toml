[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.GAME.round_resets.blind_states.Small = 'Defeated''''
position = 'after'
payload = '''elseif bonuser then
    bonus_reward(G.GAME.blind.config.bonus)'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''if G.GAME.round_resets.blind == G.P_BLINDS.bl_small then'''
position = 'at'
payload = '''if (bonuser == nil) and (G.GAME.round_resets.blind == G.P_BLINDS.bl_small) then'''
match_indent = true
overwrite = true

[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''G.FUNCS.draw_from_hand_to_discard()'''
position = 'before'
payload = '''local bonuser = nil
if G.GAME.blind:get_type() == 'Bonus' then
    bonuser = true
    bonus_end_of_round(G.GAME.blind.config.bonus)
end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = '''elseif self.name == "Big Blind" then'''
position = 'before'
payload = '''elseif self.config.bonus then
    return 'Bonus'
'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'function Blind:load(blindTable)'
position = 'after'
payload = '''self.config.bonus = blindTable.bonusy

'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'return blindTable'
position = 'before'
payload = '''blindTable.bonusy = self.config.bonus
    '''
match_indent = true

[[patches]]
[patches.pattern]
target = 'blind.lua'
pattern = 'function Blind:set_blind(blind, reset, silent)'
position = 'after'
payload = '''   if not reset then
        self.config.bonus = nil
    end'''
match_indent = true

[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'if G.FORCE_BOSS then return G.FORCE_BOSS end'
position = 'after'
payload = '''if G.GAME.forced_blinds and G.GAME.forced_blinds[G.GAME.round_resets.ante] then
    local blind = G.GAME.forced_blinds[G.GAME.round_resets.ante]
    G.GAME.forced_blinds[G.GAME.round_resets.ante] = nil
    return blind
end'''
match_indent = true
